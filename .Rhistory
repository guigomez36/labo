print(sum(
(pred_testing[, "evento"] >= 0.025) * ifelse(
# Usamos la clase ternaria para calcular la gan
dtest$clase_ternaria == "BAJA+2",
78000,
-2000) / 0.3
)
)
# La siguiente función devuelve todas las hojas (nodos terminales) en una tabla
# sobre un modelo. Es una "mejora" sobre la función dada en el script z201:
# - El target ahora debe ser binario: evento/noevento
# - Calcula la ganancia en base
# - Ordena de mayor a menor ganancia
# - Agrega un prefijo para poder juntar diferentes resultados.
# hoja train/test(continua baja+1 baja+2 evento noevento prob ganancia)
leaves_table <- function(model, train, target, prefix = "") {
leaves_train_table <- data.table(
# Devuelve en que hoja cae un caso
leaves = rpart.predict.leaves(model, train, type = "where"),
classes = train[, clase_ternaria],
target = train[, get(target)]
)
leaves <- dcast(
leaves_train_table,
leaves ~ classes, length,
value.var = "target")
leaves <- leaves[
dcast(
leaves_train_table,
leaves ~ target, length,
value.var = "target"),
on = .(leaves)]
leaves[, n := evento + noevento]
leaves[, p := round(evento / n,4)]
leaves <- leaves[order(-p),]
leaves[, gan := `BAJA+2` * 78000 - (CONTINUA + `BAJA+1`) * 2000]
leaves[, ':='(evento = NULL, noevento = NULL)]
setnames(leaves, old = c("BAJA+1", "BAJA+2", "CONTINUA", "n", "p", "gan"),
new = c(paste0(prefix, "b1"),
paste0(prefix, "b2"),
paste0(prefix, "cont"),
paste0(prefix, "n"),
paste0(prefix, "p"),
paste0(prefix, "gan")))
leaves[]
}
# Examinamos las nuevas hojas de nuestro modelo para entender las nuevas
# probabilidad. Primero sobre TRAIN
train_bin2 <- leaves_table(modelo_bin2, dtrain, "clase_binaria2")
print(train_bin2)
train_bin2[, gan_acum := cumsum(gan) / 0.7]
train_bin2[, n_acum := cumsum(n) / 0.7]
print(train_bin2)
# La ganancia en train para el punto de corte de 0.025 es
train_bin2[p >= 0.025, sum(gan) / 0.7]
# Podemos buscar el punto de corte optimo con un par de sentencias de R
pos_max_gan <- which.max(train_bin2$gan_acum)
# La ganancia máxima
train_bin2[pos_max_gan, gan_acum]
# La probabilidad que da esa ganancia
train_bin2[pos_max_gan, p]
# La cantidad de envíos normalizados para esa ganancia
train_bin2[pos_max_gan, n_acum / 0.7]
## Preguntas
## ¿Es útil con su semilla este mezcla de clases?
## ¿Qué desafíos ve en este punto?
# Saquemos los registros de la clase BAJA+1 para entrenar, porque la C1
# también esta lleno de loquitos...
modelo_sin_b1 <- rpart(clase_binaria2 ~ . - clase_ternaria - clase_binaria1,
data = dtrain[dtrain$clase_ternaria != "BAJA+1", ],
xval = 0,
control = parametros)
train_sin_b1 <- leaves_table(modelo_sin_b1, dtrain, "clase_binaria2")
train_sin_b1[, gan_acum := cumsum(gan) / 0.7]
train_sin_b1[, n_acum := cumsum(n)]
train_sin_b1
## Sin preguntas ni comentarios
# Saquemos las hojas para test y juntemos todo en una tabla para analizar
test_bin2 <- leaves_table(modelo_bin2, dtest, "clase_binaria2", "te_")
res_bin2 <- train_bin2[test_bin2, on = .(leaves)]
res_bin2 <- res_bin2[order(-p)]
res_bin2[, te_gan_acum := cumsum(te_gan) / 0.3]
res_bin2[, te_n_acum := cumsum(te_n) / 0.3]
# Solo veamos algunas columnas
print(res_bin2[, c("p", "n", "gan", "gan_acum", "te_n", "te_gan",
"te_gan_acum", "te_n_acum")])
## Preguntas
#Optimizacion Bayesiana de hiperparametros de  ranger  (Random Forest)
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("yaml")
require("ranger")
require("randomForest")  #solo se usa para imputar nulos
require("parallel")
#paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
kBO_iter  <- 100   #cantidad de iteraciones de la Optimizacion Bayesiana
#Estructura que define los hiperparámetros y sus rangos
hs  <- makeParamSet(
makeIntegerParam("num.trees" ,        lower=  100L, upper= 2500L),  #la letra L al final significa ENTERO
makeIntegerParam("max.depth",         lower=    1L, upper=   30L),  # 0 significa profundidad infinita
makeIntegerParam("min.node.size" ,    lower=    1L, upper=  500L),
makeIntegerParam("mtry" ,             lower=    2L, upper=   50L))
ksemilla_azar  <- 100069  #Aqui poner la propia semilla
#------------------------------------------------------------------------------
#graba a un archivo los componentes de lista
#para el primer registro, escribe antes los titulos
loguear  <- function( reg, arch=NA, folder="./work/", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0(  folder, substitute( reg ), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file= archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file= archivo, append= TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
# particionar( data=dataset, division=c(1,1,1,1,1), agrupa=clase_ternaria, seed=semilla)   divide el dataset en 5 particiones
particionar  <- function( data, division, agrupa="", campo="fold", start=1, seed=NA )
{
if( !is.na( seed)  )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x ) }, division, seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
ranger_Simple  <- function( fold_test, pdata, param )
{
#genero el modelo
set.seed(ksemilla_azar)
modelo  <- ranger( formula= "clase_binaria ~ .",
data=  pdata[ fold!= fold_test],
probability=   TRUE,  #para que devuelva las probabilidades
num.trees=     param$num.trees,
mtry=          param$mtry,
min.node.size= param$min.node.size,
max.depth=     param$max.depth
)
prediccion  <- predict( modelo, pdata[ fold == fold_test] )
ganancia_testing  <- pdata[ fold==fold_test,
sum( (prediccion$predictions[ ,"POS" ] > 1/40) *
ifelse( clase_binaria=="POS", 78000, -2000)  ) ]
return( ganancia_testing )
}
#------------------------------------------------------------------------------
ranger_CrossValidation  <- function( data, param, pcampos_buenos, qfolds, pagrupa, semilla )
{
divi  <- rep( 1, qfolds )
particionar( data, divi, seed=semilla, agrupa=pagrupa )
ganancias  <- mcmapply( ranger_Simple,
seq(qfolds), # 1 2 3 4 5
MoreArgs= list( data, param),
SIMPLIFY= FALSE,
mc.cores= 1 )   #dejar esto en  1, porque ranger ya corre en paralelo
data[ , fold := NULL ]   #elimino el campo fold
#devuelvo la ganancia promedio normalizada
ganancia_promedio  <- mean( unlist( ganancias ) )
ganancia_promedio_normalizada  <- ganancia_promedio * qfolds
return( ganancia_promedio_normalizada )
}
#------------------------------------------------------------------------------
#esta funcion solo puede recibir los parametros que se estan optimizando
#el resto de los parametros se pasan como variables globales
EstimarGanancia_ranger  <- function( x )
{
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
xval_folds  <- 5   # 5-fold cross validation
ganancia  <- ranger_CrossValidation( dataset,
param= x,
qfolds= xval_folds,
pagrupa= "clase_binaria",
semilla= ksemilla_azar )
#logueo
xx  <- x
xx$xval_folds  <-  xval_folds
xx$ganancia  <- ganancia
xx$iteracion  <- GLOBAL_iteracion
loguear( xx, arch= klog )
return( ganancia )
}
#------------------------------------------------------------------------------
#Aqui comienza el programa
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\DataMining_Economia_Finanzas\\"#Establezco el Working Directory
#cargo el dataset donde voy a entrenar el modelo
dataset  <- fread("C:\\DataMining_Economia_Finanzas\\datasets\\competencia2_2022.csv.gz", stringsAsFactors= TRUE)   #donde entreno
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\DataMining_Economia_Finanzas\\" #Establezco el Working Directory
#cargo el dataset donde voy a entrenar el modelo
dataset  <- fread("C:\\DataMining_Economia_Finanzas\\datasets\\competencia2_2022.csv.gz", stringsAsFactors= TRUE)   #donde entreno
#Optimizacion Bayesiana de hiperparametros de  ranger  (Random Forest)
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("yaml")
require("ranger")
require("randomForest")  #solo se usa para imputar nulos
require("parallel")
#paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
kBO_iter  <- 100   #cantidad de iteraciones de la Optimizacion Bayesiana
#Estructura que define los hiperparámetros y sus rangos
hs  <- makeParamSet(
makeIntegerParam("num.trees" ,        lower=  100L, upper= 2500L),  #la letra L al final significa ENTERO
makeIntegerParam("max.depth",         lower=    1L, upper=   30L),  # 0 significa profundidad infinita
makeIntegerParam("min.node.size" ,    lower=    1L, upper=  500L),
makeIntegerParam("mtry" ,             lower=    2L, upper=   50L))
ksemilla_azar  <- 100069  #Aqui poner la propia semilla
#------------------------------------------------------------------------------
#graba a un archivo los componentes de lista
#para el primer registro, escribe antes los titulos
loguear  <- function( reg, arch=NA, folder="./work/", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0(  folder, substitute( reg ), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file= archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file= archivo, append= TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
# particionar( data=dataset, division=c(1,1,1,1,1), agrupa=clase_ternaria, seed=semilla)   divide el dataset en 5 particiones
particionar  <- function( data, division, agrupa="", campo="fold", start=1, seed=NA )
{
if( !is.na( seed)  )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x ) }, division, seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
ranger_Simple  <- function( fold_test, pdata, param )
{
#genero el modelo
set.seed(ksemilla_azar)
modelo  <- ranger( formula= "clase_binaria ~ .",
data=  pdata[ fold!= fold_test],
probability=   TRUE,  #para que devuelva las probabilidades
num.trees=     param$num.trees,
mtry=          param$mtry,
min.node.size= param$min.node.size,
max.depth=     param$max.depth
)
prediccion  <- predict( modelo, pdata[ fold == fold_test] )
ganancia_testing  <- pdata[ fold==fold_test,
sum( (prediccion$predictions[ ,"POS" ] > 1/40) *
ifelse( clase_binaria=="POS", 78000, -2000)  ) ]
return( ganancia_testing )
}
#------------------------------------------------------------------------------
ranger_CrossValidation  <- function( data, param, pcampos_buenos, qfolds, pagrupa, semilla )
{
divi  <- rep( 1, qfolds )
particionar( data, divi, seed=semilla, agrupa=pagrupa )
ganancias  <- mcmapply( ranger_Simple,
seq(qfolds), # 1 2 3 4 5
MoreArgs= list( data, param),
SIMPLIFY= FALSE,
mc.cores= 1 )   #dejar esto en  1, porque ranger ya corre en paralelo
data[ , fold := NULL ]   #elimino el campo fold
#devuelvo la ganancia promedio normalizada
ganancia_promedio  <- mean( unlist( ganancias ) )
ganancia_promedio_normalizada  <- ganancia_promedio * qfolds
return( ganancia_promedio_normalizada )
}
#------------------------------------------------------------------------------
#esta funcion solo puede recibir los parametros que se estan optimizando
#el resto de los parametros se pasan como variables globales
EstimarGanancia_ranger  <- function( x )
{
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
xval_folds  <- 5   # 5-fold cross validation
ganancia  <- ranger_CrossValidation( dataset,
param= x,
qfolds= xval_folds,
pagrupa= "clase_binaria",
semilla= ksemilla_azar )
#logueo
xx  <- x
xx$xval_folds  <-  xval_folds
xx$ganancia  <- ganancia
xx$iteracion  <- GLOBAL_iteracion
loguear( xx, arch= klog )
return( ganancia )
}
#------------------------------------------------------------------------------
#Aqui comienza el programa
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\DataMining_Economia_Finanzas\\" )
#Establezco el Working Directory
#cargo el dataset donde voy a entrenar el modelo
dataset  <- fread("C:\\DataMining_Economia_Finanzas\\datasets\\competencia2_2022.csv.gz", stringsAsFactors= TRUE)   #donde entreno
dataset  <- dataset[ foto_mes==202103 ]
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "C:\\DataMining_Economia_Finanzas\\exp\\",  showWarnings = FALSE )
dir.create( "C:\\DataMining_Economia_Finanzas\\exp\\RandomForest0\\", showWarnings = FALSE )
setwd("C:\\DataMining_Economia_Finanzas\\exp\\RandomForest0\\")   #Establezco el Working Directory DEL EXPERIMENTO
#en estos archivos quedan los resultados
kbayesiana  <- "HT6330.RDATA"
klog        <- "HT6330.txt"
GLOBAL_iteracion  <- 0   #inicializo la variable global
#si ya existe el archivo log, traigo hasta donde llegue
if( file.exists(klog) )
{
tabla_log  <- fread( klog )
GLOBAL_iteracion  <- nrow( tabla_log )
}
#paso a trabajar con clase binaria POS={BAJA+2}   NEG={BAJA+1, CONTINUA}
dataset[ , clase_binaria := as.factor(ifelse( clase_ternaria=="BAJA+2", "POS", "NEG" )) ]
dataset[ , clase_ternaria := NULL ]  #elimino la clase_ternaria, ya no la necesito
#imputo los nulos, ya que ranger no acepta nulos
#Leo Breiman, ¿por que le temias a los nulos?
dataset  <- na.roughfix( dataset )
#Aqui comienza la configuracion de la Bayesian Optimization
configureMlr( show.learner.output = FALSE)
funcion_optimizar  <- EstimarGanancia_ranger
#configuro la busqueda bayesiana,  los hiperparametros que se van a optimizar
#por favor, no desesperarse por lo complejo
obj.fun  <- makeSingleObjectiveFunction(
fn=       funcion_optimizar,
minimize= FALSE,   #estoy Maximizando la ganancia
noisy=    TRUE,
par.set=  hs,
has.simple.signature = FALSE
)
ctrl  <- makeMBOControl( save.on.disk.at.time= 600,  save.file.path= kbayesiana)
ctrl  <- setMBOControlTermination(ctrl, iters= kBO_iter )
ctrl  <- setMBOControlInfill(ctrl, crit= makeMBOInfillCritEI())
surr.km  <-  makeLearner("regr.km", predict.type= "se", covtype= "matern3_2", control= list(trace= TRUE))
#inicio la optimizacion bayesiana
if(!file.exists(kbayesiana)) {
run  <- mbo(obj.fun, learner = surr.km, control = ctrl)
} else  run  <- mboContinue( kbayesiana )   #retomo en caso que ya exista
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("yaml")
require("ranger")
require("randomForest")  #solo se usa para imputar nulos
require("parallel")
#paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
kBO_iter  <- 100   #cantidad de iteraciones de la Optimizacion Bayesiana
#Estructura que define los hiperparámetros y sus rangos
hs  <- makeParamSet(
makeIntegerParam("num.trees" ,        lower=  100L, upper= 2500L),  #la letra L al final significa ENTERO
makeIntegerParam("max.depth",         lower=    1L, upper=   30L),  # 0 significa profundidad infinita
makeIntegerParam("min.node.size" ,    lower=    1L, upper=  500L),
makeIntegerParam("mtry" ,             lower=    2L, upper=   50L))
ksemilla_azar  <- 100069  #Aqui poner la propia semilla
#------------------------------------------------------------------------------
#graba a un archivo los componentes de lista
#para el primer registro, escribe antes los titulos
loguear  <- function( reg, arch=NA, folder="C:\\DataMining_Economia_Finanzas\\", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0(  folder, substitute( reg ), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file= archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file= archivo, append= TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
# particionar( data=dataset, division=c(1,1,1,1,1), agrupa=clase_ternaria, seed=semilla)   divide el dataset en 5 particiones
particionar  <- function( data, division, agrupa="", campo="fold", start=1, seed=NA )
{
if( !is.na( seed)  )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x ) }, division, seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
ranger_Simple  <- function( fold_test, pdata, param )
{
#genero el modelo
set.seed(ksemilla_azar)
modelo  <- ranger( formula= "clase_binaria ~ .",
data=  pdata[ fold!= fold_test],
probability=   TRUE,  #para que devuelva las probabilidades
num.trees=     param$num.trees,
mtry=          param$mtry,
min.node.size= param$min.node.size,
max.depth=     param$max.depth
)
prediccion  <- predict( modelo, pdata[ fold == fold_test] )
ganancia_testing  <- pdata[ fold==fold_test,
sum( (prediccion$predictions[ ,"POS" ] > 1/40) *
ifelse( clase_binaria=="POS", 78000, -2000)  ) ]
return( ganancia_testing )
}
#------------------------------------------------------------------------------
ranger_CrossValidation  <- function( data, param, pcampos_buenos, qfolds, pagrupa, semilla )
{
divi  <- rep( 1, qfolds )
particionar( data, divi, seed=semilla, agrupa=pagrupa )
ganancias  <- mcmapply( ranger_Simple,
seq(qfolds), # 1 2 3 4 5
MoreArgs= list( data, param),
SIMPLIFY= FALSE,
mc.cores= 1 )   #dejar esto en  1, porque ranger ya corre en paralelo
data[ , fold := NULL ]   #elimino el campo fold
#devuelvo la ganancia promedio normalizada
ganancia_promedio  <- mean( unlist( ganancias ) )
ganancia_promedio_normalizada  <- ganancia_promedio * qfolds
return( ganancia_promedio_normalizada )
}
#------------------------------------------------------------------------------
#esta funcion solo puede recibir los parametros que se estan optimizando
#el resto de los parametros se pasan como variables globales
EstimarGanancia_ranger  <- function( x )
{
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
xval_folds  <- 5   # 5-fold cross validation
ganancia  <- ranger_CrossValidation( dataset,
param= x,
qfolds= xval_folds,
pagrupa= "clase_binaria",
semilla= ksemilla_azar )
#logueo
xx  <- x
xx$xval_folds  <-  xval_folds
xx$ganancia  <- ganancia
xx$iteracion  <- GLOBAL_iteracion
loguear( xx, arch= klog )
return( ganancia )
}
#------------------------------------------------------------------------------
#Aqui comienza el programa
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\DataMining_Economia_Finanzas\\" )
#cargo el dataset donde voy a entrenar el modelo
dataset  <- fread("C:\\DataMining_Economia_Finanzas\\datasets\\competencia2_2022.csv.gz", stringsAsFactors= TRUE)   #donde entreno
dataset  <- dataset[ foto_mes==202103 ]
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "C:\\DataMining_Economia_Finanzas\\exp\\",  showWarnings = FALSE )
dir.create( "C:\\DataMining_Economia_Finanzas\\exp\\RandomForest0\\", showWarnings = FALSE )
setwd("C:\\DataMining_Economia_Finanzas\\exp\\RandomForest0\\")   #Establezco el Working Directory DEL EXPERIMENTO
#en estos archivos quedan los resultados
kbayesiana  <- "HT6330.RDATA"
klog        <- "HT6330.txt"
GLOBAL_iteracion  <- 0   #inicializo la variable global
#si ya existe el archivo log, traigo hasta donde llegue
if( file.exists(klog) )
{
tabla_log  <- fread( klog )
GLOBAL_iteracion  <- nrow( tabla_log )
}
#paso a trabajar con clase binaria POS={BAJA+2}   NEG={BAJA+1, CONTINUA}
dataset[ , clase_binaria := as.factor(ifelse( clase_ternaria=="BAJA+2", "POS", "NEG" )) ]
dataset[ , clase_ternaria := NULL ]  #elimino la clase_ternaria, ya no la necesito
#imputo los nulos, ya que ranger no acepta nulos
#Leo Breiman, ¿por que le temias a los nulos?
dataset  <- na.roughfix( dataset )
xx1 <- c("mcomisiones_mantenimiento","Visa_mpagado", "ctarjeta_visa_transacciones","ctarjeta_visa_debitos_automaticos","mttarjeta_visa_debitos_automaticos","mtarjeta_visa_consumo","Master_Finiciomora","mtarjeta_master_consumo","Visa_msaldototal","Visa_msaldopesos","Master_mpagospesos","Master_mconsumospesos","ctarjeta_visa_transacciones","ctarjeta_visa_transacciones","ctarjeta_master_transacciones","Master_msaldopesos","Master_msaldopesos","cextraccion_autoservicio","Visa_msaldopesos","ccajas_transacciones","mtarjeta_master_consumo","ctarjeta_master","mtarjeta_master_consumo","Visa_msaldototal","Master_msaldototal","Master_msaldototal","mpayroll2","Visa_msaldopesos","Visa_msaldopesos","Visa_mconsumospesos","Visa_mconsumototal","mtarjeta_visa_consumo","ctarjeta_visa_transacciones","mtarjeta_master_consumo","mtarjeta_visa_consumo","tcallcenter","cprestamos_hipotecarios","mcaja_ahorro_dolares","Visa_msaldototal","Visa_msaldototal","Master_msaldopesos","ctarjeta_visa_transacciones","Visa_mpagospesos","mpasivos_margen","Visa_madelantopesos","ctarjeta_master_debitos_automaticos","mtarjeta_visa_consumo","Visa_mconsumospesos","Visa_mpagospesos","cextraccion_autoservicio","ctarjeta_debito_transacciones","mrentabilidad","cextraccion_autoservicio","ccomisiones_mantenimiento","ctarjeta_visa_debitos_automaticos","Master_msaldototal","mextraccion_autoservicio","mtarjeta_visa_consumo","catm_trx","cforex","cliente_antiguedad","cforex","ctarjeta_master_transacciones","catm_trx_other","Master_fechaalta","ctarjeta_visa_transacciones","mextraccion_autoservicio","Master_msaldodolares","mtarjeta_master_consumo","mtarjeta_master_consumo","cliente_antiguedad","mtarjeta_visa_consumo","mtarjeta_visa_consumo","Visa_msaldodolares","Master_madelantopesos","cforex_sell","Master_msaldototal","Master_mlimitecompra","Visa_msaldototal","mcomisiones","Visa_mconsumospesos","Master_mconsumospesos") # vector of columns you DON'T want
# subset
dataset <- dataset[, !xx1, with = FALSE]
View(dataset)
#Aqui comienza la configuracion de la Bayesian Optimization
configureMlr( show.learner.output = FALSE)
funcion_optimizar  <- EstimarGanancia_ranger
#configuro la busqueda bayesiana,  los hiperparametros que se van a optimizar
#por favor, no desesperarse por lo complejo
obj.fun  <- makeSingleObjectiveFunction(
fn=       funcion_optimizar,
minimize= FALSE,   #estoy Maximizando la ganancia
noisy=    TRUE,
par.set=  hs,
has.simple.signature = FALSE
)
ctrl  <- makeMBOControl( save.on.disk.at.time= 600,  save.file.path= kbayesiana)
ctrl  <- setMBOControlTermination(ctrl, iters= kBO_iter )
ctrl  <- setMBOControlInfill(ctrl, crit= makeMBOInfillCritEI())
surr.km  <-  makeLearner("regr.km", predict.type= "se", covtype= "matern3_2", control= list(trace= TRUE))
#inicio la optimizacion bayesiana
if(!file.exists(kbayesiana)) {
run  <- mbo(obj.fun, learner = surr.km, control = ctrl)
} else  run  <- mboContinue( kbayesiana )   #retomo en caso que ya exista
